multibranchPipelineJob('{{ .FullName }}') {
    branchSources {
{{- if eq .GitServerURL "https://github.com" }}
        github {
            id('{{ .ID }}')
            scanCredentialsId('tekton-git')
            repoOwner('{{ .Owner }}')
            repository('{{ .Repository }}')

            configure { node ->
              def traits = node / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits
              traits << 'jenkins.scm.impl.trait.RegexSCMSourceFilterTrait' {
                regex('docker-.*')
              }
              traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                strategyId(1)
              }
              traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                strategyId(1)
              }
              traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                strategyId(1)
                trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
              }
              traits << 'org.jenkinsci.plugins.github__branch__source.ExcludeArchivedRepositoriesTrait' {
              }
              traits << 'net.gleske.scmfilter.impl.trait.WildcardSCMHeadFilterTrait' {
                includes('main master PR-*')
                excludes()
                tagIncludes('*')
                tagExcludes()
              }

            }
        }
{{- else }}
        git {
            id('{{ .ID }}')
            credentialsId('tekton-git')
            remote('{{ .CloneURL }}')
        }
{{- end }}
    }
}
